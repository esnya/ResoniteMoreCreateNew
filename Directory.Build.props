<?xml version="1.0" encoding="utf-8"?>
<Project>
  <!-- Package Properties -->
  <PropertyGroup>
    <Authors>esnya</Authors>
    <Description>More Create New - Additional create new options for Resonite</Description>
    <RepositoryUrl>https://github.com/esnya/ResoniteMoreCreateNew</RepositoryUrl>
    <PackageProjectUrl>$(RepositoryUrl)</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Copyright>Copyright (c) 2025 $(Authors)</Copyright>
    <PackageTags>Resonite,Mod,ResoniteModLoader</PackageTags>
    <Version>0.2.0</Version>
  </PropertyGroup>
  <!-- Build Properties -->
  <PropertyGroup>
    <TargetFramework>net472</TargetFramework>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <DebugType Condition="'$(Configuration)'=='Debug'">embedded</DebugType>
    <DebugType Condition="'$(Configuration)'=='Release'">pdbonly</DebugType>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>latest-all</AnalysisLevel>
    <WarningLevel>9999</WarningLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsNotAsErrors>NU1701</WarningsNotAsErrors>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <CopyLocalLockFileAssemblies>false</CopyLocalLockFileAssemblies>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
  </PropertyGroup>
  <!-- Resonite Path Discovery -->
  <PropertyGroup Condition="'$(ResonitePath)'==''">
    <!-- Default to local folder -->
    <ResonitePath>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', 'Resonite'))</ResonitePath>
    <!-- Windows Steam path -->
    <ResonitePath
      Condition="'$(OS)'=='Windows_NT' AND Exists('C:\Program Files (x86)\Steam\steamapps\common\Resonite\')"
      >C:\Program Files (x86)\Steam\steamapps\common\Resonite</ResonitePath
    >
    <!-- Linux Steam path -->
    <ResonitePath
      Condition="'$(OS)'!='Windows_NT' AND Exists('$(USERPROFILE)\.steam\steam\steamapps\common\Resonite\')"
      >$(USERPROFILE)\.steam\steam\steamapps\common\Resonite</ResonitePath
    >
    <ResonitePath
      Condition="'$(OS)'!='Windows_NT' AND Exists('$(HOME)/.steam/steam/steamapps/common/Resonite/')"
      >$(HOME)/.steam/steam/steamapps/common/Resonite</ResonitePath
    >
  </PropertyGroup>
  <!-- Normalize ResonitePath -->
  <PropertyGroup>
    <ResonitePath>$([MSBuild]::EnsureTrailingSlash('$(ResonitePath)'))</ResonitePath>
  </PropertyGroup>
  <!-- Derived Resonite Paths -->
  <PropertyGroup>
    <ResoniteManagedPath>$([System.IO.Path]::Combine('$(ResonitePath)', 'Resonite_Data', 'Managed'))</ResoniteManagedPath>
    <ResoniteModsPath>$([System.IO.Path]::Combine('$(ResonitePath)', 'rml_mods'))</ResoniteModsPath>
    <ResoniteHotReloadPath>$([System.IO.Path]::Combine('$(ResonitePath)', 'rml_mods', 'HotReloadMods'))</ResoniteHotReloadPath>
    <ResoniteLibsPath>$([System.IO.Path]::Combine('$(ResonitePath)', 'rml_libs'))</ResoniteLibsPath>
  </PropertyGroup>
  <!-- Test Project Detection -->
  <PropertyGroup>
    <!-- Auto-detect test projects: check if project name ends with .Tests or .Test, or if xunit package is referenced -->
    <IsTestProject
      Condition="'$(IsTestProject)'=='' AND ($(MSBuildProjectName.EndsWith('.Tests')) OR $(MSBuildProjectName.EndsWith('.Test')))"
      >true</IsTestProject
    >
    <IsTestProject Condition="'$(IsTestProject)'==''">false</IsTestProject>
    <!-- For test projects, Resonite assemblies should be copied locally to make them available during test execution -->
    <ResoniteAssemblyPrivate Condition="'$(IsTestProject)'=='true'">true</ResoniteAssemblyPrivate>
    <ResoniteAssemblyPrivate Condition="'$(IsTestProject)'!='true'">false</ResoniteAssemblyPrivate>
  </PropertyGroup>
  <!-- Resonite References -->
  <ItemGroup>
    <Reference Include="ResoniteModLoader">
      <HintPath>$([System.IO.Path]::Combine('$(ResonitePath)', 'Libraries', 'ResoniteModLoader.dll'))</HintPath>
      <Private>$(ResoniteAssemblyPrivate)</Private>
    </Reference>
    <Reference Include="HarmonyLib">
      <HintPath>$([System.IO.Path]::Combine('$(ResoniteLibsPath)', '0Harmony.dll'))</HintPath>
      <Private>$(ResoniteAssemblyPrivate)</Private>
    </Reference>
    <Reference Include="FrooxEngine">
      <HintPath>$([System.IO.Path]::Combine('$(ResoniteManagedPath)', 'FrooxEngine.dll'))</HintPath>
      <Private>$(ResoniteAssemblyPrivate)</Private>
    </Reference>
    <Reference Include="Elements.Core">
      <HintPath>$([System.IO.Path]::Combine('$(ResoniteManagedPath)', 'Elements.Core.dll'))</HintPath>
      <Private>$(ResoniteAssemblyPrivate)</Private>
    </Reference>
    <Reference Include="ResoniteHotReloadLib" Condition="'$(Configuration)'=='Debug'">
      <HintPath>$([System.IO.Path]::Combine('$(ResoniteLibsPath)', 'ResoniteHotReloadLib.dll'))</HintPath>
      <Private>$(ResoniteAssemblyPrivate)</Private>
    </Reference>
  </ItemGroup>
</Project>
